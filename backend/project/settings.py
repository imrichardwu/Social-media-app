"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
from corsheaders.defaults import default_headers
import os

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-s_xewz!0b-ctg2=3!e^=nfbbscf)8wi%04i@6s9xy70lf_7&+7"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "testserver",
    "localhost",
    "127.0.0.1",
    "192.168.1.72",  # pc
    "192.168.1.75",  # laptop
    "172.24.134.109",  # current IP address
    "10.0.0.83",  # current IP address
    "192.168.48.1",  # current frontend IP
    "172.19.110.73",  # friend's IP address
]


# Application definition

INSTALLED_APPS = [
    "app",
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "drf_spectacular",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.github",
    "csp",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "project.settings.csrf_exempt_api",  # Custom middleware to exempt API endpoints from CSRF
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "app.authentication.BasicAuthenticationMiddleware",  # Custom basic auth middleware
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "app.middleware.CrossOriginSessionMiddleware",  # Custom middleware for cross-origin cookies
    # "csp.middleware.CSPMiddleware",  # Temporarily disabled for debugging
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
    "app.authentication.NodeAuthenticationBackend",  # Custom node authentication backend
]

SITE_ID = 1

# Add these settings to skip Django's auth UI
ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
SOCIALACCOUNT_LOGIN_ON_GET = True
ACCOUNT_LOGOUT_ON_GET = True  # Skip logout confirmation
SOCIALACCOUNT_AUTO_SIGNUP = True  # Auto-create accounts

# Custom adapter for GitHub OAuth
SOCIALACCOUNT_ADAPTER = "app.adapters.CustomSocialAccountAdapter"

# Ensure these session settings are correctly configured
SESSION_ENGINE = "django.contrib.sessions.backends.db"
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = "Lax"  # Use Lax for development, None requires Secure=True
SESSION_COOKIE_SECURE = False  # Set to True in production with HTTPS
SESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds
# Don't set a specific domain for session cookies in development
SESSION_COOKIE_DOMAIN = None
# Ensure session cookies are accessible across subdomains and ports
SESSION_COOKIE_PATH = "/"

# Make sure CSRF settings work with your frontend
CSRF_COOKIE_SAMESITE = "Lax"  # Match SESSION_COOKIE_SAMESITE
CSRF_COOKIE_HTTPONLY = False  # Frontend JS needs to access the CSRF token
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS
# Don't set a specific domain for CSRF cookies in development
CSRF_COOKIE_DOMAIN = None
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://192.168.1.75:5173",  # laptop
    "http://192.168.1.72:5173",  # pc
    "http://172.24.134.109:5173",  # current IP address
    "http://192.168.48.1:5173",  # current frontend IP
    "http://10.0.0.83:5173",  # current frontend IP
    # Add backend origins for CSRF
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://192.168.1.72:8000",  # pc backend
    "http://192.168.1.75:8000",  # laptop backend
    "http://172.24.134.109:8000",  # current backend IP
    "http://10.0.0.83:8000",  # current backend IP
    "http://172.19.110.73:5173",  # friend's IP address
]  # Add your frontend domain
CSRF_USE_SESSIONS = False  # Store CSRF token in cookie rather than session
CSRF_COOKIE_NAME = "csrftoken"

# Disable referer check for CSRF
CSRF_COOKIE_HTTPONLY = False


# Disable CSRF for API endpoints
def csrf_exempt_api(get_response):
    def middleware(request):
        if request.path.startswith("/api/"):
            setattr(request, "_dont_enforce_csrf_checks", True)
        return get_response(request)

    return middleware


SOCIALACCOUNT_PROVIDERS = {
    "github": {
        "SCOPE": [
            "user:email",
        ],
    }
}


ROOT_URLCONF = "project.urls"

# Dynamic frontend URL based on environment
FRONTEND_URL = os.getenv("FRONTEND_URL", "http://localhost:5173")

LOGIN_REDIRECT_URL = f"{FRONTEND_URL}/home"
LOGOUT_REDIRECT_URL = f"{FRONTEND_URL}/"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# CORS Configuration for authentication with credentials
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://192.168.1.75:5173",  # laptop
    "http://192.168.1.72:5173",  # pc
    "http://172.24.134.109:5173",  # current IP address
    "http://192.168.48.1:5173",  # current frontend IP
    "http://10.0.0.83:5173",  # current backend IP
    # Add backend origins for session cookies
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://192.168.1.72:8000",  # pc backend
    "http://192.168.1.75:8000",  # laptop backend
    "http://172.24.134.109:8000",  # current backend IP
    "http://10.0.0.83:8000",  # current backend IP
    "http://172.19.110.73:5173",  # friend's IP address
]

CORS_ALLOW_CREDENTIALS = True

# Allow all headers for cross-origin requests
CORS_ALLOWED_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# Additional CORS settings for development
CORS_EXPOSE_HEADERS = [
    "content-type",
    "x-csrftoken",
    "set-cookie",
]

# Allow credentials in preflight requests
CORS_ALLOW_CREDENTIALS = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Static files
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom User Model
AUTH_USER_MODEL = "app.Author"

# Django REST Framework Configuration
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",  # Helpful for debugging
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# drf-spectacular Configuration
SPECTACULAR_SETTINGS = {
    "TITLE": "Social Distribution API",
    "DESCRIPTION": "API for the Social Distribution platform supporting federated social networking",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "COMPONENT_SPLIT_REQUEST": True,
    "SCHEMA_PATH_PREFIX": "/api/",
}

# Site URL for generating author URLs - configurable via environment
SITE_URL = os.getenv("SITE_URL", "http://localhost:8000")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
# Auto-approve local users on signup (set to False to require admin approval)
AUTO_APPROVE_NEW_USERS = os.getenv("AUTO_APPROVE_NEW_USERS", "False") == "True"

os.makedirs(MEDIA_ROOT, exist_ok=True)

# Content Security Policy Configuration
CONTENT_SECURITY_POLICY_REPORT_ONLY = {
    "DIRECTIVES": {
        "base-uri": ["'self'"],
        "connect-src": ["'self'", "https://api.github.com", "https://github.com"],
        "default-src": ["'self'"],
        "font-src": [
            "'self'",
            "https://fonts.gstatic.com",
            "https://github.githubassets.com",
        ],
        "form-action": ["'self'"],
        "frame-src": ["'self'", "https://github.com"],
        "img-src": ["'self'", "data:", "https:"],
        "media-src": ["'self'"],
        "object-src": ["'none'"],
        "script-src": [
            "'self'",
            "https://github.githubassets.com",
            "https://cdn.jsdelivr.net",
            "nonce",
        ],
        "style-src": [
            "'self'",
            "'unsafe-inline'",
            "https://github.githubassets.com",
            "https://fonts.googleapis.com",
        ],
    }
}
