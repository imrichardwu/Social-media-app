# Generated by Django 5.2.1 on 2025-06-14 08:01

import app.models.author
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(help_text='Full URL identifier (FQID)', unique=True)),
                ('display_name', models.CharField(blank=True, max_length=255)),
                ('github_username', models.CharField(blank=True, max_length=255)),
                ('profile_image', models.URLField(blank=True)),
                ('bio', models.TextField(blank=True)),
                ('is_approved', models.BooleanField(default=False, help_text='Whether admin has approved this author')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', app.models.author.AuthorManager()),
            ],
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(help_text='Full URL identifier (FQID)', unique=True)),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('content_type', models.CharField(choices=[('text/plain', 'Plain Text'), ('text/markdown', 'Markdown'), ('image/png', 'PNG Image'), ('image/jpeg', 'JPEG Image')], default='text/plain', max_length=50)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('unlisted', 'Unlisted'), ('friends', 'Friends Only'), ('deleted', 'Deleted')], default='public', max_length=20)),
                ('source', models.URLField(blank=True, help_text='Source URL (e.g., GitHub)')),
                ('origin', models.URLField(blank=True, help_text='Origin URL')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to=settings.AUTH_USER_MODEL, to_field='url')),
            ],
            options={
                'verbose_name_plural': 'entries',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(help_text='Full URL identifier (FQID)', unique=True)),
                ('content', models.TextField()),
                ('content_type', models.CharField(choices=[('text/plain', 'Plain Text'), ('text/markdown', 'Markdown'), ('image/png', 'PNG Image'), ('image/jpeg', 'JPEG Image')], default='text/plain', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL, to_field='url')),
                ('entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='app.entry', to_field='url')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('followed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers_set', to=settings.AUTH_USER_MODEL, to_field='url')),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_set', to=settings.AUTH_USER_MODEL, to_field='url')),
            ],
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendships_as_author1', to=settings.AUTH_USER_MODEL, to_field='url')),
                ('author2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendships_as_author2', to=settings.AUTH_USER_MODEL, to_field='url')),
            ],
        ),
        migrations.CreateModel(
            name='InboxDelivery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delivered_at', models.DateTimeField(auto_now_add=True)),
                ('success', models.BooleanField(default=True)),
                ('entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.entry')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, to_field='url')),
            ],
        ),
        migrations.AddField(
            model_name='entry',
            name='inboxes_sent_to',
            field=models.ManyToManyField(related_name='received_entries', through='app.InboxDelivery', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(help_text='Full URL identifier (FQID)', unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to=settings.AUTH_USER_MODEL, to_field='url')),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='app.comment', to_field='url')),
                ('entry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='app.entry', to_field='url')),
            ],
        ),
        migrations.CreateModel(
            name='Inbox',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_type', models.CharField(choices=[('entry', 'Entry'), ('comment', 'Comment'), ('like', 'Like'), ('follow', 'Follow Request')], max_length=20)),
                ('raw_data', models.JSONField(help_text='Raw JSON data of the object')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.comment', to_field='url')),
                ('entry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.entry', to_field='url')),
                ('follow', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.follow')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inbox_items', to=settings.AUTH_USER_MODEL, to_field='url')),
                ('like', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.like', to_field='url')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('host', models.URLField(help_text='Base URL of the remote node', unique=True)),
                ('username', models.CharField(help_text='Username for HTTP Basic Auth', max_length=255)),
                ('password', models.CharField(help_text='Password for HTTP Basic Auth', max_length=255)),
                ('is_active', models.BooleanField(default=True, help_text='Whether to accept connections from this node')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'indexes': [models.Index(fields=['is_active'], name='app_node_is_acti_eec7db_idx'), models.Index(fields=['created_at'], name='app_node_created_652f3e_idx')],
            },
        ),
        migrations.AddField(
            model_name='author',
            name='node',
            field=models.ForeignKey(blank=True, help_text='Remote node this author belongs to (null for local authors)', null=True, on_delete=django.db.models.deletion.CASCADE, to='app.node'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['entry', 'created_at'], name='app_comment_entry_i_2f8bcc_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['author', 'created_at'], name='app_comment_author__d97980_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['created_at'], name='app_comment_created_8d70f3_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['updated_at'], name='app_comment_updated_6bf32d_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['entry'], name='app_comment_entry_i_be5588_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['author'], name='app_comment_author__b9aa41_idx'),
        ),
        migrations.AddIndex(
            model_name='follow',
            index=models.Index(fields=['follower', 'status'], name='app_follow_followe_0fb9ac_idx'),
        ),
        migrations.AddIndex(
            model_name='follow',
            index=models.Index(fields=['followed', 'status'], name='app_follow_followe_ddeb80_idx'),
        ),
        migrations.AddIndex(
            model_name='follow',
            index=models.Index(fields=['status'], name='app_follow_status_eb5a7b_idx'),
        ),
        migrations.AddIndex(
            model_name='follow',
            index=models.Index(fields=['created_at'], name='app_follow_created_879ed9_idx'),
        ),
        migrations.AddIndex(
            model_name='follow',
            index=models.Index(fields=['updated_at'], name='app_follow_updated_f9f756_idx'),
        ),
        migrations.AddIndex(
            model_name='follow',
            index=models.Index(fields=['follower', 'followed', 'status'], name='app_follow_followe_bd005b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='follow',
            unique_together={('follower', 'followed')},
        ),
        migrations.AddIndex(
            model_name='friendship',
            index=models.Index(fields=['author1'], name='app_friends_author1_0b02e5_idx'),
        ),
        migrations.AddIndex(
            model_name='friendship',
            index=models.Index(fields=['author2'], name='app_friends_author2_c63e3e_idx'),
        ),
        migrations.AddIndex(
            model_name='friendship',
            index=models.Index(fields=['created_at'], name='app_friends_created_3fc291_idx'),
        ),
        migrations.AddIndex(
            model_name='friendship',
            index=models.Index(fields=['author1', 'author2'], name='app_friends_author1_d75ff2_idx'),
        ),
        migrations.AddConstraint(
            model_name='friendship',
            constraint=models.CheckConstraint(condition=models.Q(('author1', models.F('author2')), _negated=True), name='no_self_friendship'),
        ),
        migrations.AlterUniqueTogether(
            name='friendship',
            unique_together={('author1', 'author2')},
        ),
        migrations.AddIndex(
            model_name='inboxdelivery',
            index=models.Index(fields=['entry'], name='app_inboxde_entry_i_66a322_idx'),
        ),
        migrations.AddIndex(
            model_name='inboxdelivery',
            index=models.Index(fields=['recipient'], name='app_inboxde_recipie_ecb7cd_idx'),
        ),
        migrations.AddIndex(
            model_name='inboxdelivery',
            index=models.Index(fields=['delivered_at'], name='app_inboxde_deliver_10515f_idx'),
        ),
        migrations.AddIndex(
            model_name='inboxdelivery',
            index=models.Index(fields=['success'], name='app_inboxde_success_c403c8_idx'),
        ),
        migrations.AddIndex(
            model_name='inboxdelivery',
            index=models.Index(fields=['recipient', 'delivered_at'], name='app_inboxde_recipie_b49cff_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='inboxdelivery',
            unique_together={('entry', 'recipient')},
        ),
        migrations.AddIndex(
            model_name='entry',
            index=models.Index(fields=['author', 'visibility'], name='app_entry_author__53aa48_idx'),
        ),
        migrations.AddIndex(
            model_name='entry',
            index=models.Index(fields=['visibility', 'created_at'], name='app_entry_visibil_2c2ba8_idx'),
        ),
        migrations.AddIndex(
            model_name='entry',
            index=models.Index(fields=['author', 'created_at'], name='app_entry_author__4fd841_idx'),
        ),
        migrations.AddIndex(
            model_name='entry',
            index=models.Index(fields=['content_type'], name='app_entry_content_5cac7a_idx'),
        ),
        migrations.AddIndex(
            model_name='entry',
            index=models.Index(fields=['created_at'], name='app_entry_created_72afe3_idx'),
        ),
        migrations.AddIndex(
            model_name='entry',
            index=models.Index(fields=['updated_at'], name='app_entry_updated_e50771_idx'),
        ),
        migrations.AddIndex(
            model_name='entry',
            index=models.Index(fields=['-created_at'], name='app_entry_created_36a910_idx'),
        ),
        migrations.AddIndex(
            model_name='entry',
            index=models.Index(fields=['visibility'], name='app_entry_visibil_11ec3a_idx'),
        ),
        migrations.AddIndex(
            model_name='entry',
            index=models.Index(fields=['author', 'visibility', 'created_at'], name='app_entry_author__b5b29f_idx'),
        ),
        migrations.AddIndex(
            model_name='like',
            index=models.Index(fields=['entry', 'created_at'], name='app_like_entry_i_69f35c_idx'),
        ),
        migrations.AddIndex(
            model_name='like',
            index=models.Index(fields=['comment', 'created_at'], name='app_like_comment_8c6793_idx'),
        ),
        migrations.AddIndex(
            model_name='like',
            index=models.Index(fields=['author', 'created_at'], name='app_like_author__020680_idx'),
        ),
        migrations.AddIndex(
            model_name='like',
            index=models.Index(fields=['created_at'], name='app_like_created_745147_idx'),
        ),
        migrations.AddIndex(
            model_name='like',
            index=models.Index(fields=['entry'], name='app_like_entry_i_285606_idx'),
        ),
        migrations.AddIndex(
            model_name='like',
            index=models.Index(fields=['comment'], name='app_like_comment_e1ba17_idx'),
        ),
        migrations.AddIndex(
            model_name='like',
            index=models.Index(fields=['author'], name='app_like_author__ea2647_idx'),
        ),
        migrations.AddConstraint(
            model_name='like',
            constraint=models.CheckConstraint(condition=models.Q(('entry__isnull', False), ('comment__isnull', False), _connector='OR'), name='like_has_target'),
        ),
        migrations.AddConstraint(
            model_name='like',
            constraint=models.CheckConstraint(condition=models.Q(('entry__isnull', False), ('comment__isnull', False), _negated=True), name='like_single_target'),
        ),
        migrations.AlterUniqueTogether(
            name='like',
            unique_together={('author', 'comment'), ('author', 'entry')},
        ),
        migrations.AddIndex(
            model_name='inbox',
            index=models.Index(fields=['recipient', 'item_type'], name='app_inbox_recipie_d81d83_idx'),
        ),
        migrations.AddIndex(
            model_name='inbox',
            index=models.Index(fields=['recipient', 'is_read'], name='app_inbox_recipie_93b8fa_idx'),
        ),
        migrations.AddIndex(
            model_name='inbox',
            index=models.Index(fields=['recipient', 'created_at'], name='app_inbox_recipie_8d1fae_idx'),
        ),
        migrations.AddIndex(
            model_name='inbox',
            index=models.Index(fields=['item_type'], name='app_inbox_item_ty_8c794c_idx'),
        ),
        migrations.AddIndex(
            model_name='inbox',
            index=models.Index(fields=['created_at'], name='app_inbox_created_929f45_idx'),
        ),
        migrations.AddIndex(
            model_name='inbox',
            index=models.Index(fields=['is_read'], name='app_inbox_is_read_34b269_idx'),
        ),
        migrations.AddIndex(
            model_name='inbox',
            index=models.Index(fields=['-created_at'], name='app_inbox_created_9d4400_idx'),
        ),
        migrations.AddIndex(
            model_name='inbox',
            index=models.Index(fields=['recipient'], name='app_inbox_recipie_18e08a_idx'),
        ),
        migrations.AddIndex(
            model_name='author',
            index=models.Index(fields=['node'], name='app_author_node_id_80b5d0_idx'),
        ),
        migrations.AddIndex(
            model_name='author',
            index=models.Index(fields=['is_approved'], name='app_author_is_appr_1c6cd0_idx'),
        ),
        migrations.AddIndex(
            model_name='author',
            index=models.Index(fields=['created_at'], name='app_author_created_5dde23_idx'),
        ),
        migrations.AddIndex(
            model_name='author',
            index=models.Index(fields=['updated_at'], name='app_author_updated_5b11fe_idx'),
        ),
        migrations.AddIndex(
            model_name='author',
            index=models.Index(fields=['display_name'], name='app_author_display_05766b_idx'),
        ),
        migrations.AddIndex(
            model_name='author',
            index=models.Index(fields=['github_username'], name='app_author_github__f8365c_idx'),
        ),
        migrations.AddIndex(
            model_name='author',
            index=models.Index(fields=['node', 'is_approved'], name='app_author_node_id_f66715_idx'),
        ),
    ]
